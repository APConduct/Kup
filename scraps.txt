export class GestureRecognizer {
public:
    enum class GestureType {
        Tap, DoubleTap, LongPress, Pan, Pinch, Swipe
    };

    struct GestureEvent {
        GestureType type;
        Point<float> position;
        Point<float> delta;
        float scale;
        float rotation;
    };

private:
    std::vector<std::function<void(const GestureEvent&)>> handlers;

    // Gesture state tracking
    Point<float> initial_position;
    Point<float> last_position;
    float initial_distance;
    float last_tap_time;
    bool tracking_gesture = false;

public:
    void update() {
        // Check for gestures and fire events
        // This is a simplified implementation

        // Handle pan gesture
        if (IsMouseButtonDown(MOUSE_LEFT_BUTTON)) {
            auto pos = Point<float>::from_mouse_pos();

            if (!tracking_gesture) {
                tracking_gesture = true;
                initial_position = pos;
                last_position = pos;
            } else {
                auto delta = Point<float>{pos.x - last_position.x, pos.y - last_position.y};

                if (std::abs(delta.x) > 5.0f || std::abs(delta.y) > 5.0f) {
                    GestureEvent event{
                        GestureType::Pan,
                        pos,
                        delta,
                        1.0f,
                        0.0f
                    };

                    for (const auto& handler : handlers) {
                        handler(event);
                    }
                }

                last_position = pos;
            }
        } else {
            tracking_gesture = false;
        }

        // Implement other gestures
    }

    void add_handler(std::function<void(const GestureEvent&)> handler) {
        handlers.push_back(std::move(handler));
    }
};


___________________________________________


export class ShortcutManager {
public:
    struct Shortcut {
        bool ctrl;
        bool shift;
        bool alt;
        KeyboardKey key;
        std::string id;
        std::string description;
    };

private:
    std::vector<Shortcut> shortcuts;
    std::unordered_map<std::string, std::function<void()>> actions;

public:
    void register_shortcut(const Shortcut& shortcut, std::function<void()> action) {
        shortcuts.push_back(shortcut);
        actions[shortcut.id] = std::move(action);
    }

    bool process_key_event(const events::KeyPressEvent& event) {
        if (!event.pressed) return false;

        for (const auto& shortcut : shortcuts) {
            if (shortcut.key == event.key &&
                shortcut.ctrl == event.ctrl.value_or(false) &&
                shortcut.shift == event.shift.value_or(false) &&
                shortcut.alt == event.alt.value_or(false)) {

                auto it = actions.find(shortcut.id);
                if (it != actions.end()) {
                    it->second();
                    return true;
                }
            }
        }

        return false;
    }

    std::vector<Shortcut> get_shortcuts() const {
        return shortcuts;
    }
};
___________________________________________

export class EffectManager {
public:
    enum class Effect {
        Blur, DropShadow, Glow, ColorFilter
    };

    struct EffectParams {
        Effect type;
        std::variant<
            // Blur
            struct { float radius; },

            // DropShadow
            struct {
                float offset_x;
                float offset_y;
                float blur_radius;
                Color color;
            },

            // Glow
            struct {
                float radius;
                Color color;
            },

            // ColorFilter
            struct {
                Color tint;
                float intensity;
            }
        > params;
    };

private:
    std::vector<EffectParams> effects;

public:
    void add_effect(const EffectParams& effect) {
        effects.push_back(effect);
    }

    void clear_effects() {
        effects.clear();
    }

    void apply_effects(const Rect<float>& bounds,
                       std::function<void()> render_content) {
        // Save the current content to texture
        RenderTexture2D target = LoadRenderTexture(
            static_cast<int>(bounds.width()),
            static_cast<int>(bounds.height())
        );

        BeginTextureMode(target);
        ClearBackground(BLANK);
        render_content();
        EndTextureMode();

        // Apply each effect in order
        for (const auto& effect : effects) {
            apply_effect(effect, target);
        }

        // Draw the final result
        Rectangle source = { 0, 0,
                           static_cast<float>(target.texture.width),
                           -static_cast<float>(target.texture.height) };

        Rectangle dest = { bounds.x(), bounds.y(),
                         bounds.width(), bounds.height() };

        DrawTexturePro(target.texture, source, dest, {0, 0}, 0.0f, WHITE);

        UnloadRenderTexture(target);
    }

private:
    void apply_effect(const EffectParams& effect, RenderTexture2D& target) {
        // Implementation depends on the type of effect
        switch (effect.type) {
            case Effect::Blur:
                apply_blur(effect, target);
                break;
            case Effect::DropShadow:
                apply_drop_shadow(effect, target);
                break;
            case Effect::Glow:
                apply_glow(effect, target);
                break;
            case Effect::ColorFilter:
                apply_color_filter(effect, target);
                break;
        }
    }

    // Individual effect implementations
    void apply_blur(const EffectParams& effect, RenderTexture2D& target) {
        // Simple box blur implementation
        auto& params = std::get<0>(effect.params);
        float radius = params.radius;

        // Create a second target for the result
        RenderTexture2D result = LoadRenderTexture(target.texture.width,
                                                  target.texture.height);

        BeginTextureMode(result);
        ClearBackground(BLANK);

        // Draw with custom shader (box blur)
        Shader blur_shader = LoadShaderFromMemory(nullptr, R"(
            #version 330

            in vec2 fragTexCoord;
            in vec4 fragColor;
            out vec4 finalColor;

            uniform sampler2D texture0;
            uniform float radius;
            uniform vec2 resolution;

            void main() {
                vec4 color = vec4(0.0);
                float weight = 0.0;

                for(float y = -radius; y <= radius; y++) {
                    for(float x = -radius; x <= radius; x++) {
                        vec2 offset = vec2(x, y) / resolution;
                        color += texture(texture0, fragTexCoord + offset);
                        weight += 1.0;
                    }
                }

                finalColor = color / weight;
            }
        )");

        SetShaderValue(blur_shader, GetShaderLocation(blur_shader, "radius"),
                      &radius, SHADER_UNIFORM_FLOAT);

        float resolution[2] = {
            static_cast<float>(target.texture.width),
            static_cast<float>(target.texture.height)
        };

        SetShaderValue(blur_shader, GetShaderLocation(blur_shader, "resolution"),
                      &resolution, SHADER_UNIFORM_VEC2);

        BeginShaderMode(blur_shader);

        Rectangle source = { 0, 0,
                           static_cast<float>(target.texture.width),
                           -static_cast<float>(target.texture.height) };

        Rectangle dest = { 0, 0,
                         static_cast<float>(result.texture.width),
                         static_cast<float>(result.texture.height) };

        DrawTexturePro(target.texture, source, dest, {0, 0}, 0.0f, WHITE);

        EndShaderMode();
        EndTextureMode();

        UnloadRenderTexture(target);
        target = result;

        UnloadShader(blur_shader);
    }

    void apply_drop_shadow(const EffectParams& effect, RenderTexture2D& target) {
        // Implementation for drop shadow effect
        auto& params = std::get<1>(effect.params);

        // Create shadow texture
        RenderTexture2D shadow = LoadRenderTexture(target.texture.width,
                                                 target.texture.height);

        // Draw shadow (offset and blurred)
        BeginTextureMode(shadow);
        ClearBackground(BLANK);

        Rectangle source = { 0, 0,
                           static_cast<float>(target.texture.width),
                           -static_cast<float>(target.texture.height) };

        Rectangle dest = { params.offset_x, params.offset_y,
                         static_cast<float>(shadow.texture.width),
                         static_cast<float>(shadow.texture.height) };

        DrawTexturePro(target.texture, source, dest, {0, 0}, 0.0f, params.color);

        EndTextureMode();

        // Apply blur to shadow
        EffectParams blur_effect;
        blur_effect.type = Effect::Blur;
        blur_effect.params = struct { float radius; } { params.blur_radius };

        apply_blur(blur_effect, shadow);

        // Combine shadow and original
        RenderTexture2D result = LoadRenderTexture(target.texture.width,
                                                 target.texture.height);

        BeginTextureMode(result);
        ClearBackground(BLANK);

        // Draw shadow first
        DrawTexturePro(shadow.texture,
                      { 0, 0,
                       static_cast<float>(shadow.texture.width),
                       -static_cast<float>(shadow.texture.height) },
                      { 0, 0,
                       static_cast<float>(result.texture.width),
                       static_cast<float>(result.texture.height) },
                      {0, 0}, 0.0f, WHITE);

        // Then draw original on top
        DrawTexturePro(target.texture,
                      { 0, 0,
                       static_cast<float>(target.texture.width),
                       -static_cast<float>(target.texture.height) },
                      { 0, 0,
                       static_cast<float>(result.texture.width),
                       static_cast<float>(result.texture.height) },
                      {0, 0}, 0.0f, WHITE);

        EndTextureMode();

        UnloadRenderTexture(shadow);
        UnloadRenderTexture(target);
        target = result;
    }

    // Implement other effect functions similarly
    void apply_glow(const EffectParams& effect, RenderTexture2D& target) {
        // Implementation for glow effect
    }

    void apply_color_filter(const EffectParams& effect, RenderTexture2D& target) {
        // Implementation for color filter effect
    }
};

___________________________________________

export class AnimationTimeline {
private:
    struct Keyframe {
        float time;
        std::variant<float, Color, Point<float>> value;
    };

    struct Track {
        std::string target_property;
        std::vector<Keyframe> keyframes;
        Animator::EasingFunction<float> easing;
    };

    std::vector<Track> tracks;
    float duration = 0.0f;
    float current_time = 0.0f;
    bool is_playing = false;
    bool is_looping = false;

public:
    void add_track(std::string property,
                  std::vector<Keyframe> keyframes,
                  Animator::EasingFunction<float> easing = Animator::linear_interpolate<float>) {

        Track track{std::move(property), std::move(keyframes), std::move(easing)};

        // Update duration
        for (const auto& keyframe : track.keyframes) {
            duration = std::max(duration, keyframe.time);
        }

        tracks.push_back(std::move(track));
    }

    void play() {
        is_playing = true;
    }

    void pause() {
        is_playing = false;
    }

    void reset() {
        current_time = 0.0f;
    }

    void set_looping(bool loop) {
        is_looping = loop;
    }

    void update(float delta_time) {
        if (!is_playing) return;

        current_time += delta_time;

        if (current_time > duration) {
            if (is_looping) {
                current_time = fmod(current_time, duration);
            } else {
                current_time = duration;
                is_playing = false;
            }
        }
    }

    template<typename T>
    std::optional<T> get_value(const std::string& property) const {
        for (const auto& track : tracks) {
            if (track.target_property == property) {
                // Find the surrounding keyframes
                const Keyframe* prev = nullptr;
                const Keyframe* next = nullptr;

                for (const auto& keyframe : track.keyframes) {
                    if (keyframe.time <= current_time) {
                        prev = &keyframe;
                    }

                    if (keyframe.time >= current_time && (!next || keyframe.time < next->time)) {
                        next = &keyframe;
                    }
                }

                if (prev && next && prev != next) {
                    float t = (current_time - prev->time) / (next->time - prev->time);

                    // Try to get values as T
                    try {
                        T prev_val = std::get<T>(prev->value);
                        T next_val = std::get<T>(next->value);

                        // Interpolate based on type
                        if constexpr (std::is_same_v<T, float>) {
                            return track.easing(prev_val, next_val, t);
                        }
                        else if constexpr (std::is_same_v<T, Color>) {
                            return Animator::interpolate_color(prev_val, next_val, t);
                        }
                        else if constexpr (std::is_same_v<T, Point<float>>) {
                            return Animator::interpolate_point(prev_val, next_val, t);
                        }
                    } catch (const std::bad_variant_access&) {
                        // Value was not of type T
                    }
                }
                else if (prev) {
                    // At or after last keyframe
                    try {
                        return std::get<T>(prev->value);
                    } catch (const std::bad_variant_access&) {
                        // Value was not of type T
                    }
                }
                else if (next) {
                    // Before first keyframe
                    try {
                        return std::get<T>(next->value);
                    } catch (const std::bad_variant_access&) {
                        // Value was not of type T
                    }
                }
            }
        }

        return std::nullopt;
    }
};

____________________________________________________________________________________

ADD TO README LATER:

____________________________________________________________________________________

## Configuration

Kup uses a hierarchical configuration system with Lua:

```text
~/.config/kup/
├── init.lua          # Main config file
├── lua/             # Lua modules
├── plugins/         # Plugin directory
└── after/          # Post-load scripts
```

### Basic Configuration

```lua
-- Basic editor configuration
kup.setup({
  theme = "dark",
  tabsize = 2,
  autosave = true
})
```

### Plugin Development

```lua
-- Example plugin
local Plugin = require('kup.plugin')

return Plugin.new({
  name = 'my-plugin',
  setup = function(opts)
    -- Plugin initialization
  end,
  -- Plugin features
})
```


